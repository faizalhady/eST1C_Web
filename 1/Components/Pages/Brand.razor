@page "/newpage"
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using _1.Components.Layout
@using _1.Components.Charts
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@rendermode InteractiveServer
<PageTitle>Brand</PageTitle>


<div class="container-fluid vh-100 d-flex flex-column overflow-hidden" style="height: 100%;">
    <!-- Main Content -->
    <div class="mb-0" style="height: 3%;">
        <NavBar />
    </div>
    <div class="row flex-1 h-100 p-5" style="height: 95%;">
        <!-- Side Section -->
        <div class="col-1 d-flex flex-column p-0" style="height: 100%;">
            @* <div id="side-card-1" class="card mb-2 flex-fill" style="height: 20%; width: 180px;">
                <div class="card-body">
                    <!-- Side Card 1 Content -->
                </div>
            </div> *@
            <div id="side-card-2" class="card mb-3" style="height: 550px; width: 180px;">
                <div class="card-headerR text-center p-2">
                    <div class="header-text">Workcell</div>
                </div>
                <div class="card-body d-flex flex-column align-items-center gap-1 p-1 overflow-auto side-nav">
                    <!-- Buttons -->
                    <div class="d-grid gap-1">
                        @foreach (var buttonLabel in ButtonLabels)
                        {
                            <button class="btn @(selectedKey == buttonLabel ? "btn-primary" : "btn-outline-primary")"
                                @onclick="() => UpdateDataKey(buttonLabel)">
                                @buttonLabel
                            </button>
                        }
                    </div>

                </div>
            </div>
            <div id="side-card-2" class="card mb-3" style="height: 300px; width: 180px;">
                <div class="card-headerR text-center p-2">
                    <div class="header-text">Brand</div>
                </div>
                <div class="card-body d-flex flex-column align-items-center gap-1 p-1 overflow-auto side-nav">
                    <!-- Buttons -->
                    <div class="d-grid gap-1">
                          <button class="btn @(selectedKey == "Brand" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='@(() => UpdateDataNavKey("Brand"))'>
                            Overall
                                    </button>
                        @foreach (var buttonLabel in ButtonBrand)
                        {

                            <button class="btn @(selectedKey == buttonLabel ? "btn-primary" : "btn-outline-primary")"
                                @onclick="() => UpdateDataNavKey(buttonLabel)">
                                @buttonLabel
                            </button>
                            
                        }
                    </div>

                </div>
            </div>
            <div id="side-card-2" class="card" style="height: 200px; width: 180px;">
                <div class="card-headerR text-center p-2">
                    <div class="header-text">Torque Range</div>
                </div>
                <div class="card-body d-flex flex-column align-items-center gap-1 p-1 overflow-auto side-nav">
                    <!-- Buttons -->
                    <div class="d-grid gap-1">
                        <button class="btn btn-outline-primary"
                                @onclick="() => RangeNav()">
                                Overall
                            </button>
                    </div>

                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col d-flex flex-column" style="height: 100%;">
            <!-- First Row -->
            <div class="row g-2 mb-2" style="flex: 0 0 12%;"> <!-- Reduced height to 12% -->
                <div class="col-4">
                    <div id="card-1" class="card h-100 p-0">
                        <div class="card-headerA text-center p-2 m-0">
                            @if(@selectedKey =="Brand")
                            {
                            <div class="header-text">Overall Smart Torque</div>
                            }else
                            {
                            <div class="header-text">@selectedKey Smart Torque</div>
                            }
                        </div>
                        <div class="card-body d-flex align-items-center justify-content-center p-0 m-0">
                            <div class="body-text">@GetContent(1)</div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div id="card-1" class="card h-100 p-0">
                        <div class="card-headerB text-center p-2 m-0">
                            @if(@selectedKey =="Brand")
                            {
                            <div class="header-text">Overall Active Smart Torque</div>
                            }else
                            {
                            <div class="header-text">@selectedKey Active Smart Torque</div>
                            }
                        </div>
                        <div class="card-body d-flex align-items-center justify-content-center p-0 m-0">
                            <div class="body-text">@GetContent(2)</div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div id="card-3" class="card h-100 p-0">
                        <div class="card-headerC text-center p-2 m-0">
                            @if(@selectedKey =="Brand")
                            {
                            <div class="header-text">Overall Idle Smart Torque</div>
                            }else
                            {
                            <div class="header-text">@selectedKey Idle Smart Torque</div>
                            }
                        </div>
                        <div class="card-body d-flex align-items-center justify-content-center p-0 m-0">
                            <div class="body-text">@GetContent(3)</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Second Row -->
            <div class="row g-2 mb-2" style="flex: 0 0 43%;"> <!-- Adjusted height -->

                <div class="col-8">
                    <div id="card-6" class="card h-100 d-flex flex-column">

                        <div class="card-headerR text-center p-2 m-0">
                            <div style="display: flex; align-items: center; position: relative; font-weight: bold;"
                                class="pt-0">
                                <div style="flex: 1; text-align: center; color: white;">@selectedKey Smart Torque By
                                    @(showWorkcell ?
                                        "Workcell" : "Plant")</div>
                                <div style="position: absolute; right: 0;" class="p-2 pt-2">
                                    <div class="btn-group">
                                        <button
                                            class="btn btn-sm @(showWorkcell ? "btn-outline-primary" : "btn-primary")"
                                            @onclick="ShowPlant">Plant</button>
                                        <button
                                            class="btn btn-sm @(showWorkcell ? "btn-primary" : "btn-outline-primary")"
                                            @onclick="ShowWorkcell">Workcell</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex-grow-1 p-3">
                            @if (showWorkcell)
                            {
                                <BarWorkcell DataKey="@selectedKey" Height="100%" Width="100%"
                                    @key="@($"{selectedKey}_BarWorkcell")" />
                            }
                            else
                            {
                                <BarPlant2 DataKey="@selectedKey" Height="100%" Width="100%"
                                    @key="@($"{selectedKey}_BarPlant2")" />
                            }
                        </div>

                    </div>

                </div>
                <div class="col-4">
                    <div id="card-7" class="card h-100 d-flex flex-column">
                        <div class="card-headerR text-center p-2 m-0">

                            <div class="header-text">@selectedKey SAP EAM</div>
                        </div>
                        <div class="flex-grow-1 p-0 m-0">
                            @if(@selectedKey == "Brand")
                            {
                                <BrandSAP DataKey="@selectedKey" Height="100%" Width="100%"
                                @key="@($"{selectedKey}_BrandSAP")" />
                            }else 
                            {
                                <Donut2 DataKey="@selectedKey" Height="100%" Width="100%"
                                @key="@($"{selectedKey}_Donut")" />
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Third Row -->
            <div class="row g-2" style="flex: 0 0 45%;"> <!-- Adjusted height -->
                <div class="col-6">
                    <div id="card-8" class="card h-100 d-flex flex-column">
                        <div class="card-headerR text-center p-2 m-0">
                            <div class="header-text">@selectedKey Smart Torque Details</div>
                        </div>
                        <div class="flex-grow-1 p-4" style="overflow-y: auto; max-height: 400px;">
                            <!-- Added scrolling -->
                            <Table2 DataKey="@selectedKey" @key="@($"{selectedKey}_Table2")"
                                RowClicked="OnRowClicked" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div id="card-9" class="card h-100 d-flex flex-column">
                        <div class="card-headerR text-center p-2 m-0">
                            @if (selectedKey == "Overall")
                            {
                                <div class="header-text">Smart Torque Cycle Count</div>
                            }
                            else
                            {
                                <div class="header-text">@selectedKey Smart Torque Cycle Count</div>
                            }
                        </div>
                        <div class="flex-grow-1 p-4">
                            <Line @key="@ChildSelectedWorkcell" SelectedWorkcell="@ChildSelectedWorkcell" width="100%"
                                height="170%" />
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@if (showNotification)
{
    <div class="sticky-lg-bottom">
        <div class="scrolling-text">
            Welcome to Smart Torque One-Center! Workcell details for Advantest DF, Fortive, Cohu, Gas Box, Lam Mec, and
            Micron SIG are in progress. Contact SME: Chanop/Syed. Thank you!!!
        </div>
    </div>
}

@code {
    private bool showWorkcell = true;
    private bool showNotification = false;


    private string selectedKey = "Brand"; // Default dataset
    private List<string> ButtonLabels = new() { "Overall", "Onto", "Beckman Coulter","Becton Dickinson","Advantest DF",
"Fortive", "Cohu","Gas Box", "Lam Mec", "Micron SIG" };
    private List<string> ButtonBrand = new() { "Hantas", "Desoutter", "Sehan" };

    private string? ChildSelectedWorkcell = null;

    private void OnRowClicked(string workcellName)
    {
        ChildSelectedWorkcell = workcellName; // Update child dynamically
        Console.WriteLine($"Row clicked: {workcellName}");
    }
    private void UpdateDataKey(string key)
    {
        ChildSelectedWorkcell = "";
        NavManager.NavigateTo($"/?selectedKey={key}");
        selectedKey = key; // Update the dataset key
    }
     public void RangeNav(){
        NavManager.NavigateTo("/range");
    }
    private void UpdateDataNavKey(string key)
    {
        if (key == "Overall")
        {
            key = "Brand";
        }
        ChildSelectedWorkcell = "";
        selectedKey = key; // Update the dataset key
    }

    private void ShowWorkcell()
    {
        showWorkcell = true;
    }

    private void ShowPlant()
    {
        showWorkcell = false;
    }

    protected override void OnInitialized()
    {
        // Run the timer logic in a separate task
        Task.Run(() => ToggleNotificationAsync());
        // Parse query parameters
        var uri = new Uri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Get the selectedKey parameter, defaulting to "Overall" if it's not provided
        selectedKey = query["selectedKey"] ?? "Overall";

         NavManager.LocationChanged += OnLocationChanged;
        
        // Set initial parameter values
        UpdateSelectedKeyFromUri();
    }
     private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateSelectedKeyFromUri();
    }

    private void UpdateSelectedKeyFromUri()
    {
        // Parse query parameters
        var uri = new Uri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Update the selectedKey parameter, defaulting to "Overall" if not provided
        var newSelectedKey = query["selectedKey"] ?? "Overall";

        if (selectedKey != newSelectedKey)
        {
            selectedKey = newSelectedKey;
            StateHasChanged(); // Force re-render
        }
    }

    private async Task ToggleNotificationAsync()
    {
        while (true)
        {
            showNotification = true; // Show the notification
            InvokeAsync(StateHasChanged); // Safely notify Blazor of state change

            await Task.Delay(20000); // Keep the notification visible for 10 seconds
            showNotification = false; // Hide the notification
            InvokeAsync(StateHasChanged); // Safely notify Blazor of state change

            await Task.Delay(10000); // Wait for 10 seconds before showing again
        }
    }


    private string GetContent(int cardNumber)
    {
        return selectedKey switch
        {
            "Brand" => cardNumber switch
            {
                1 => "251",
                2 => "245",
                3 => "6",
                _ => "Default Content"
            },
            "Sehan" => cardNumber switch
            {
                1 => "11",
                2 => "11",
                3 => "0",
                _ => "Default Content"
            },
            "Hantas" => cardNumber switch
            {
                1 => "213",
                2 => "213",
                3 => "0",
                _ => "Default Content"
            },
            "Desoutter" => cardNumber switch
            {
                1 => "27",
                2 => "27",
                3 => "0",
                _ => "Default Content"
            },
            
            _ => "Default Content"
        };
    }

}


<style>
    .header-text {
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
    }

    .body-text {
        font-size: 3rem;
        /* Smaller font size for body */
    }

    .card-header,
    .card-body {
        padding: 0;
        margin: 0;
    }

    .card-header {
        background-color: coral;
        border-bottom: solid 1px black;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .card-headerA {
        background-color: rgb(53, 128, 240);
        border-bottom: solid 1px black;


    }

    .card-headerB {
        background-color: rgb(26, 175, 0);
        border-bottom: solid 1px black;
    }

    .card-headerC {
        background-color: rgb(252, 104, 78);
        border-bottom: solid 1px black;
    }

    .card-headerR {
        background-color: rgb(0, 20, 118);
        border-bottom: solid 1px black;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .side-nav {

        overflow: scroll;
    }

    .sticky-lg-bottom {


        position: absolute;
        bottom: 0;
        left: 0;
        /* Ensure it starts at the very left of the screen */
        width: 100vw;
        /* Full viewport width */
        margin: 0;
        /* Remove any default margins */
        padding: 0;
        /* Remove any padding */
        z-index: 1000;
        /* Ensure it stays on top */
    }

    .btn{
        min-width: 150px;
    }
</style>
