@page "/raw"
@using System.Collections.Generic
@inject MasterDataService MasterDataService
@using BlazorBootstrap
@rendermode InteractiveServer

<Grid TItem="Customer2" Class="table table-hover table-bordered text-wrap table-sm me-0"
      DataProvider="CustomersDataProvider" AllowPaging="true" AllowSorting="true" FixedHeader="true" Responsive="true"
      PageSize="23" Height="@Height">
    <GridColumns>
        <GridColumn TItem="Customer2" FreezeLeftPosition="0" HeaderText="No" PropertyName="No" SortString="No"
                    SortKeySelector="item => item.No" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center"
                    TextAlignment="Alignment.Center">
            @context.No
        </GridColumn>
        <GridColumn TItem="Customer2" FreezeLeftPosition="54.98" HeaderText="Brand" PropertyName="Brand"
                    SortString="Brand" SortKeySelector="item => item.Brand" FilterTextboxWidth="80">
            @context.Brand
        </GridColumn>
        <GridColumn TItem="Customer2" HeaderText="Model" PropertyName="Model" SortString="Model"
                    SortKeySelector="item => item.Model" FilterTextboxWidth="100">
            @context.Model
        </GridColumn>
        <GridColumn TItem="Customer2" HeaderText="Torque Range (lbf-in)" PropertyName="TorqueRangeLbfIn"
                    SortString="TorqueRangeLbfIn" SortKeySelector="item => item.TorqueRangeLbfIn" FilterTextboxWidth="120">
            @context.TorqueRangeLbfIn
        </GridColumn>
        <GridColumn TItem="Customer2" FreezeDirection="FreezeDirection.Right" FreezeRightPosition="0"
                    HeaderText="Quantity" PropertyName="Quantity" SortString="Quantity"
                    SortKeySelector="item => item.Quantity" FilterTextboxWidth="2">
            @context.Quantity
        </GridColumn>
    </GridColumns>
</Grid>

<style>
    .table-sm .table td,
    .table-sm .table th {
        padding: 0.1rem;
        /* Smaller padding for compact look */
    }
</style>

@code {
    public class Customer2
    {
        public int? No { get; set; }
        public string? Brand { get; set; }
        public string? Model { get; set; }
        public string? TorqueRangeLbfIn { get; set; }
        public string? Quantity { get; set; }
    }

    [Parameter] public float Height { get; set; } = 750;

    private async Task<GridDataProviderResult<Customer2>> CustomersDataProvider(GridDataProviderRequest<Customer2> request)
    {
        try
        {
            // Fetch data from the database using the service
            var masterDataList = await MasterDataService.GetAllMasterDataAsync();

            // Map MasterData to Customer2
            var customers = masterDataList.Select(item => new Customer2
            {
                No = item.Id ?? 0,
                Brand = item.Brand,
                Model = item.Model,
                TorqueRangeLbfIn = item.Specification,
                Quantity = item.Quantity?.ToString()
            }).ToList();

            // Sorting
            var sortedCustomers = customers;
            if (request.Sorting is not null && request.Sorting.Any())
            {
                var sortKey = request.Sorting.First().SortKeySelector;
                sortedCustomers = request.Sorting.First().SortDirection == SortDirection.Ascending
                    ? customers.OrderBy(sortKey.Compile()).ToList()
                    : customers.OrderByDescending(sortKey.Compile()).ToList();
            }

            // Paging
            var pagedData = sortedCustomers
                .Skip((request.PageNumber - 1) * request.PageSize)
                .Take(request.PageSize)
                .ToList();

            // Return data for the current page along with the total count
            return new GridDataProviderResult<Customer2>
            {
                Data = pagedData,
                TotalCount = customers.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching or processing data: {ex.Message}");
            return new GridDataProviderResult<Customer2>
            {
                Data = new List<Customer2>(), // Return an empty list in case of errors
                TotalCount = 0
            };
        }
    }
}
