@page "/SapTable"
@inject NavigationManager NavManager
@inject MasterDataService MasterDataService
@using BlazorBootstrap

@if (masterInventoryList == null)
{
    <p>Loading...</p>
}
else if (!masterInventoryList.Any())
{
    <p>No data available for the selected filter.</p>
}
else
{
    <div class="container-fluid">
        <Grid TItem="MasterInventory"
              Class="table table-hover table-bordered text-wrap table-sm"
              DataProvider="MasterDataProvider"
              AllowPaging="true"
              AllowSorting="true"
              AllowFiltering="true"
              Responsive="true"
              PageSize="15"
              RowClass="@GetRowClass">
              
            <GridColumns>
                <GridColumn TItem="MasterInventory" HeaderText="No." PropertyName="Id" SortKeySelector="item => item.Id" FilterTextboxWidth="80">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Workcell" PropertyName="Workcell" SortKeySelector="item => item.Workcell">
                    @context.Workcell
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Brand" PropertyName="Brand" SortKeySelector="item => item.Brand">
                    @context.Brand
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Torque Model" PropertyName="TorqueModel" SortKeySelector="item => item.TorqueModel">
                    @context.TorqueModel
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Torque Serial No." PropertyName="TorqueSerialNumber" SortKeySelector="item => item.TorqueSerialNumber">
                    @context.TorqueSerialNumber
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="SAP EAM No." PropertyName="RegisterSAPEAM" SortKeySelector="item => item.RegisterSAPEAM">
                    @context.RegisterSAPEAM
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Registration Status" PropertyName="RegistrationStatus" SortKeySelector="item => item.RegistrationStatus">
                    @context.RegistrationStatus
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Usage Status" PropertyName="UserStatus" SortKeySelector="item => item.UserStatus">
                    @context.UserStatus
                </GridColumn>
            </GridColumns>
        </Grid>
    </div>
}

@code {
    private string? SelectedKey { get; set; }
    private List<MasterInventory>? masterInventoryList;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        SelectedKey = query["selectedKey"];

        try
        {
            Console.WriteLine($"Fetching data for filter: {SelectedKey}");
            var data = await MasterDataService.GetAllMasterDataAsync();

            // Apply filter logic based on SelectedKey
            if (!string.IsNullOrEmpty(SelectedKey))
            {
                if (SelectedKey == "Overall" || SelectedKey == "Brand")
                {
                    Console.WriteLine("Displaying full list");
                }
                else if (SelectedKey == "Sehan" || SelectedKey == "Hantas" || SelectedKey == "Desoutter")
                {
                    data = data.Where(item => item.Brand == SelectedKey).ToList();
                }
                else
                {
                    data = data.Where(item => item.Workcell == SelectedKey).ToList();
                }
            }

            // Assign sequential IDs for sorting and filtering
            masterInventoryList = data.Select((item, index) =>
            {
                item.Id = index + 1; // Ensure the Id property exists in the model
                return item;
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task<GridDataProviderResult<MasterInventory>> MasterDataProvider(GridDataProviderRequest<MasterInventory> request)
    {
        if (masterInventoryList == null)
        {
            masterInventoryList = await MasterDataService.GetAllMasterDataAsync();

            // Assign sequential IDs if data is reloaded
            masterInventoryList = masterInventoryList.Select((item, index) =>
            {
                item.Id = index + 1;
                return item;
            }).ToList();
        }

        return await Task.FromResult(request.ApplyTo(masterInventoryList));
    }

    private string GetRowClass(MasterInventory emp)
    {
        return string.IsNullOrWhiteSpace(emp.RegisterSAPEAM) || emp.RegisterSAPEAM == "Not Registered"
            ? "table-danger"
            : "table-success";
    }
}
