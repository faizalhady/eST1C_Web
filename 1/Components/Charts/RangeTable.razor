@page "/rangeTable"
@inject MasterDataService MasterDataService
@using BlazorBootstrap

@if (masterInventoryList == null)
{
    <p>Loading...</p>
}
else if (!masterInventoryList.Any())
{
    <p>No data available.</p>
}
else
{
    <div class="container-fluid">
        <Grid TItem="MasterInventory"
              Class="table table-hover table-bordered text-wrap table-sm"
              DataProvider="MasterDataProvider"
              AllowPaging="true"
              AllowSorting="true"
              AllowFiltering="true"
              Responsive="true"
              PageSize="15"
              RowClass="@GetRowClass">
            <GridColumns>
                <GridColumn TItem="MasterInventory" HeaderText="No." PropertyName="Id" Style="width: 10px;" FilterTextboxWidth="80" SortKeySelector="item => item.Id">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Brand" PropertyName="Brand" SortKeySelector="item => item.Brand">
                    @context.Brand
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Torque Model" PropertyName="TorqueModel" SortKeySelector="item => item.TorqueModel">
                    @context.TorqueModel
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Torque Range" PropertyName="TorqueRange" SortKeySelector="item => item.TorqueRange">
                    @context.TorqueRange
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Torque Serial No." PropertyName="TorqueSerialNumber" SortKeySelector="item => item.TorqueSerialNumber">
                    @context.TorqueSerialNumber
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Workcell" PropertyName="Workcell" SortKeySelector="item => item.Workcell">
                    @context.Workcell
                </GridColumn>
                <GridColumn TItem="MasterInventory" HeaderText="Usage Status" PropertyName="UserStatus" SortKeySelector="item => item.UserStatus">
                    @context.UserStatus
                </GridColumn>
            </GridColumns>
        </Grid>

         
    </div>
}

@code {
    private IEnumerable<MasterInventory>? masterInventoryList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Fetching data...");
            masterInventoryList = await MasterDataService.GetAllMasterDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task<GridDataProviderResult<MasterInventory>> MasterDataProvider(GridDataProviderRequest<MasterInventory> request)
    {
        if (masterInventoryList == null)
        {
            masterInventoryList = await MasterDataService.GetAllMasterDataAsync();
        }

        // Automatically apply filtering, sorting, and paging
        return await Task.FromResult(request.ApplyTo(masterInventoryList));
    }


     private string GetRowClass(MasterInventory emp)
    {
        return string.IsNullOrWhiteSpace(emp.UserStatus) || emp.UserStatus == "Active"
            ? "table-success"
            : "table-danger";
    }
}
